Here are concrete CSV examples you can drop into secondary_sweep_ranges.csv to override the “all” defaults per frequency. Important: use one schema per file (list form or range form), not both in the same CSV. The optimizer gives precedence CSV > ENV > built‑ins. Frequency is parsed from the asset tag’s second token (e.g., btc_1h, eth_4h, sol_1day, btc_1week).

List form (same header as your current file)

Schema: param,values,frequency
values: comma/semicolon‑separated numbers
Example (add below your existing “all” rows)
param,values,frequency
candle_percent,"0.005,0.01,0.02,0.05,0.10,0.20",1h
macd_percent,"0.5,1,2,3",1h
risk_pct,"1,2,3,5,8",1h
stop_pct,"1,2,3,5,7",1h
tp_pct,"2,3,5,7,10",1h
candle_percent,"0.01,0.02,0.05,0.10,0.20,0.30",4h
macd_percent,"1,2,3,4",4h
risk_pct,"2,3,5,8,12",4h
stop_pct,"2,3,5,7,9",4h
tp_pct,"3,5,7,10,15",4h
candle_percent,"0.01,0.02,0.05,0.10,0.20,0.50",1day
macd_percent,"1,2,3,4,5",1day
risk_pct,"3,5,8,12,18,25",1day
stop_pct,"2,3,5,7,10",1day
tp_pct,"3,5,7,10,15,20,30,50",1day
candle_percent,"0.02,0.05,0.10,0.20,0.50,1.00",1week
macd_percent,"1,2,3,4,6,8,10",1week
risk_pct,"3,5,8,12,15",1week
stop_pct,"3,5,7,10,15",1week
tp_pct,"5,10,15,20,30,50",1week

Range form (alternative schema)

Use this in a separate CSV file (or replace current one)
Schema: param,min,max,step,frequency
step can be number or the string auto (auto = ~6 points; log‑spaced for candle_percent, linear for others)
Example (range form)
param,min,max,step,frequency
candle_percent,0.005,0.20,auto,1h
macd_percent,0.5,3.0,0.5,1h
risk_pct,1,8,auto,1h
stop_pct,1,7,auto,1h
tp_pct,2,10,auto,1h
candle_percent,0.01,0.30,auto,4h
macd_percent,1,4,1,4h
risk_pct,2,12,auto,4h
stop_pct,2,9,auto,4h
tp_pct,3,15,auto,4h
candle_percent,0.01,0.50,auto,1day
macd_percent,1,5,1,1day
risk_pct,3,25,auto,1day
stop_pct,2,10,auto,1day
tp_pct,3,50,auto,1day
candle_percent,0.02,1.00,auto,1week
macd_percent,1,10,auto,1week
risk_pct,3,15,auto,1week
stop_pct,3,15,auto,1week
tp_pct,5,50,auto,1week

How it selects ranges

The optimizer reads SS_RANGES_CSV (defaults to secondary_sweep_ranges.csv).
It selects rows where frequency equals the asset’s frequency (1h/4h/1day/1week). If none match, it falls back to all rows. Then falls back to ENV, then built‑ins.
For indicator candidates:
If CSV provides candle_percent or macd_percent lists/ranges, it builds the indicator grid from CSV.
Else, it uses doe_parameters_example.csv; if missing/invalid, it falls back to a small built‑in indicator set.
Tips

Keep grids reasonable: total tasks ≈ |candle×macd| × |risk×stop×tp| × folds. Use coarse‑to‑fine (enabled by default) to keep runtime sensible.
Verify asset tags follow <symbol>_<frequency> (e.g., btc_1h, eth_4h, btc_1day, btc_1week) so frequency overrides match correctly.
You can point the optimizer to a different CSV with SS_RANGES_CSV=path\to\your.csv.